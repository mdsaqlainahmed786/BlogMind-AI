// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  firstName    String
  lastName     String
  username     String      @unique
  email        String      @unique
  password     String
  otp          String?
  otpExpiry    DateTime?
  isVerified   Boolean     @default(false)
  isSubscribed Boolean     @default(false)
  membership   Membership? 
  membershipId String?
  blogs        Blog[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Like         Like[]
  Comments     Comments[]
}

model Membership {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String         @unique
  plan        MembershipPlan
  aiBlogsLeft Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Blog {
  id            String     @id @default(uuid())
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String
  isAIGenerated Boolean    @default(false)
  heading       String
  description   String
  imageUrl      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  likes         Like[]
  Comments      Comments[]
}

model Like {
  id     String @id @default(uuid())
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([blogId, userId]) // Ensures one like per user per blog
}

enum MembershipPlan {
  BASIC
  STANDARD
  PREMIUM
}

model Comments {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
